// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210926184051_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("AppUserCrews", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CrewsId")
                        .HasColumnType("TEXT");

                    b.HasKey("AppUserId", "CrewsId");

                    b.HasIndex("CrewsId");

                    b.ToTable("AppUserCrews");
                });

            modelBuilder.Entity("BillablesPunch", b =>
                {
                    b.Property<Guid>("BillablesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PunchId")
                        .HasColumnType("TEXT");

                    b.HasKey("BillablesId", "PunchId");

                    b.HasIndex("PunchId");

                    b.ToTable("BillablesPunch");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PunchId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PunchId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Domain.Billables", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Billables");
                });

            modelBuilder.Entity("Domain.Crews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Job", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Customer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PunchId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("PunchId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Domain.Punch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ClockIn")
                        .HasColumnType("TEXT");

                    b.Property<double>("ClockInLongLat")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ClockOut")
                        .HasColumnType("TEXT");

                    b.Property<double>("ClockOutLongLat")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Punches");
                });

            modelBuilder.Entity("AppUserCrews", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Crews", null)
                        .WithMany()
                        .HasForeignKey("CrewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BillablesPunch", b =>
                {
                    b.HasOne("Domain.Billables", null)
                        .WithMany()
                        .HasForeignKey("BillablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Punch", null)
                        .WithMany()
                        .HasForeignKey("PunchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.HasOne("Domain.Punch", null)
                        .WithMany("AppUser")
                        .HasForeignKey("PunchId");
                });

            modelBuilder.Entity("Domain.Job", b =>
                {
                    b.HasOne("Domain.Punch", null)
                        .WithMany("Job")
                        .HasForeignKey("PunchId");
                });

            modelBuilder.Entity("Domain.Punch", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("Job");
                });
#pragma warning restore 612, 618
        }
    }
}
